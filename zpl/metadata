typealias floating_point {
    exp_dig = 8;
    mant_dig = 24;
    byte_order = le;
    align = 8;
} := float32;

event {
	name = zpl_tflm_enter;
	id = 0xA0;
	fields := struct {
		uint32_t thread_id;
		uint16_t subgraph_idx;
		uint16_t op_idx;
		ctf_bounded_string_t tag[20];
		uint32_t arena_used_bytes;
		uint32_t arena_tail_usage;
	};
};

event {
	name = zpl_tflm_exit;
	id = 0xA1;
	fields := struct {
		uint32_t thread_id;
		uint16_t subgraph_idx;
		uint16_t op_idx;
		ctf_bounded_string_t tag[20];
		uint32_t arena_used_bytes;
		uint32_t arena_tail_usage;
	};
};

enum zpl_memory_region : uint8_t {
	ZPL_STACK,
	ZPL_HEAP,
	ZPL_K_HEAP,
	ZPL_MEM_SLAB,
};

event {
	name = zpl_tvm_enter;
	id = 0xB0;
	fields := struct {
		uint32_t thread_id;
		uint8_t op_idx;
		ctf_bounded_string_t tag[60];
	};
};

event {
	name = zpl_tvm_exit;
	id = 0xB1;
	fields := struct {
		uint32_t thread_id;
		uint8_t op_idx;
		ctf_bounded_string_t tag[60];
	};
};

event {
	name = zpl_inference_enter;
	id = 0xD0;
};

event {
	name = zpl_inference_exit;
	id = 0xD1;
};

event {
	name = zpl_memory;
	id = 0xEE;
	fields := struct {
		enum zpl_memory_region memory_region;
		uint32_t memory_addr;
		uint32_t used;
		uint32_t unused;
		uint32_t for_thread_id;
	};
};

event {
	name = zpl_cpu_load_event;
	id = 0xC0;
	fields := struct {
		uint16_t cpu_load;
	};
};

event {
	name = zpl_die_temp_event;
	id = 0xC1;
	fields := struct {
		float32 die_temp[2];
	};
};
